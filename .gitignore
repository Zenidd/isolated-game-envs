middleware/.idea/
middleware/.vscode/
middleware/node_modules/
middleware/build/
middleware/.DS_Store
middleware/*.tgz
middleware/my-app*
middleware/template/src/__tests__/__snapshots__/
middleware/lerna-debug.log
middleware/npm-debug.log*
middleware/yarn-debug.log*
middleware/yarn-error.log*
middleware/.changelog
middleware/.npm/


api/.idea/
api/.vscode/
api/node_modules/
api/build/
api/.DS_Store
api/*.tgz
api/my-app*
api/template/src/__tests__/__snapshots__/
api/lerna-debug.log
api/npm-debug.log*
api/yarn-debug.log*
api/yarn-error.log*
api/.changelog
api/.npm/

ui/.idea/
ui/.vscode/
ui/node_modules/
ui/build/
ui/.DS_Store
ui/*.tgz
ui/my-app*
ui/template/src/__tests__/__snapshots__/
ui/lerna-debug.log
ui/npm-debug.log*
ui/yarn-debug.log*
ui/yarn-error.log*
ui/.changelog
ui/.npm/

# Local .terraform directories
**/.terraform/*

# .tfstate files
*.tfstate
*.tfstate.*

# Crash log files
crash.log
crash.*.log

# Exclude all .tfvars files, which are likely to contain sensitive data, such as
# password, private keys, and other secrets. These should not be part of version 
# control as they are data points which are potentially sensitive and subject 
# to change depending on the environment.
*.tfvars
*.tfvars.json

# Ignore override files as they are usually used to override resources locally and so
# are not checked in
override.tf
override.tf.json
*_override.tf
*_override.tf.json

# Include override files you do wish to add to version control using negated pattern
# !example_override.tf

# Include tfplan files to ignore the plan output of command: terraform plan -out=tfplan
# example: *tfplan*

# Ignore CLI configuration files
.terraformrc
terraform.rc

.DS_Store